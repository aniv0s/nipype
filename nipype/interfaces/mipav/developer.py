# -*- coding: utf8 -*-
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

from nipype.interfaces.base import CommandLine, CommandLineInputSpec, SEMLikeCommandLine, TraitedSpec, File, Directory, traits, isdefined, InputMultiPath, OutputMultiPath
import os


class JistToolsRelabelSegmentationInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inSegmentation = File(desc="Segmentation Image", exists=True, argstr="--inSegmentation %s")
    inRelabeling = File(desc="Re-labeling list", exists=True, argstr="--inRelabeling %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outRelabeled = traits.Either(traits.Bool, File(), hash_files=False, desc="Relabeled Segmentation", argstr="--outRelabeled %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistToolsRelabelSegmentationOutputSpec(TraitedSpec):
    outRelabeled = File(desc="Relabeled Segmentation", exists=True)


class JistToolsRelabelSegmentation(SEMLikeCommandLine):
    """title: Relabel Segmentation

category: Developer Tools

description: Relabel a segmentation image based on a list of label correspondences.

version: 1.0.RC

"""

    input_spec = JistToolsRelabelSegmentationInputSpec
    output_spec = JistToolsRelabelSegmentationOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.tools.JistToolsRelabelSegmentation "
    _outputs_filenames = {'outRelabeled':'outRelabeled.nii'}


class JistModuleSimpleSliceLabelsClusteringInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inLabel = File(desc="Label Image", exists=True, argstr="--inLabel %s")
    inMask = File(desc="Mask Image", exists=True, argstr="--inMask %s")
    inSlice = traits.Enum("X", "Y", "Z", desc="Slice direction", argstr="--inSlice %s")
    inDistribution = traits.Enum("Dice", "Jaccard", "overlap_size", "mix", "ratio", desc="Distribution metric", argstr="--inDistribution %s")
    inAggregation = traits.Enum("average", "minimax", desc="Aggregation method", argstr="--inAggregation %s")
    inDistribution2 = traits.Enum("direct", "gaussian", "non_parametric", desc="Distribution type", argstr="--inDistribution2 %s")
    inThreshold = traits.Float(desc="varies with algorithm: default is 0.5 for Jensen-Shannon, 0.05 for Hotelling, 0.0 for the rest", argstr="--inThreshold %f")
    inBasis = traits.Float(desc="number of voxels used in regularization (graph-based) and covariance approximation (Jensen-Shannon, Hotelling)", argstr="--inBasis %f")
    inMin = traits.Float(desc="minimum ratio of volume to keep the clusters", argstr="--inMin %f")
    inMax = traits.Float(desc="maximum ratio of volume to keep the clusters", argstr="--inMax %f")
    inConnectivity = traits.Int(desc="Connectivity", argstr="--inConnectivity %d")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outClusters = traits.Either(traits.Bool, File(), hash_files=False, desc="Clusters", argstr="--outClusters %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleSimpleSliceLabelsClusteringOutputSpec(TraitedSpec):
    outClusters = File(desc="Clusters", exists=True)


class JistModuleSimpleSliceLabelsClustering(SEMLikeCommandLine):
    """title: Simple Slice Clustering

category: Developer Tools

description: Clusters histology data slice by slice (simple version).

version: 1.0.RC

"""

    input_spec = JistModuleSimpleSliceLabelsClusteringInputSpec
    output_spec = JistModuleSimpleSliceLabelsClusteringOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleSimpleSliceLabelsClustering "
    _outputs_filenames = {'outClusters':'outClusters.nii'}


class JistModuleMp2rageSkullStrippingInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inInv2 = File(desc="Inv2 Image", exists=True, argstr="--inInv2 %s")
    inT1 = File(desc="T1 Map Image", exists=True, argstr="--inT1 %s")
    inIso = File(desc="Iso Image", exists=True, argstr="--inIso %s")
    inPV = File(desc="PV Image", exists=True, argstr="--inPV %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outBrain = traits.Either(traits.Bool, File(), hash_files=False, desc="Brain Mask Image", argstr="--outBrain %s")
    outMasked = traits.Either(traits.Bool, File(), hash_files=False, desc="Masked T1 Map Image", argstr="--outMasked %s")
    outMasked2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Masked Iso Image", argstr="--outMasked2 %s")
    outMasked3 = traits.Either(traits.Bool, File(), hash_files=False, desc="Masked PV Image", argstr="--outMasked3 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleMp2rageSkullStrippingOutputSpec(TraitedSpec):
    outBrain = File(desc="Brain Mask Image", exists=True)
    outMasked = File(desc="Masked T1 Map Image", exists=True)
    outMasked2 = File(desc="Masked Iso Image", exists=True)
    outMasked3 = File(desc="Masked PV Image", exists=True)


class JistModuleMp2rageSkullStripping(SEMLikeCommandLine):
    """title: Skull Stripping

category: Developer Tools

description: Estimate a brain mask for a Mp2rage dataset.

version: 1.0.RC

"""

    input_spec = JistModuleMp2rageSkullStrippingInputSpec
    output_spec = JistModuleMp2rageSkullStrippingOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleMp2rageSkullStripping "
    _outputs_filenames = {'outBrain':'outBrain.nii','outMasked3':'outMasked3.nii','outMasked2':'outMasked2.nii','outMasked':'outMasked.nii'}


class JistBrainMp2rageSkullStrippingInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inInv2 = File(desc="Inv2 Image", exists=True, argstr="--inInv2 %s")
    inT1 = File(desc="T1 Map Image", exists=True, argstr="--inT1 %s")
    inT1weighted = File(desc="T1-weighted Image", exists=True, argstr="--inT1weighted %s")
    inFilter = File(desc="Filter Image", exists=True, argstr="--inFilter %s")
    inSkip = traits.Enum("true", "false", desc="Skip zero values", argstr="--inSkip %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outBrain = traits.Either(traits.Bool, File(), hash_files=False, desc="Brain Mask Image", argstr="--outBrain %s")
    outMasked = traits.Either(traits.Bool, File(), hash_files=False, desc="Masked T1 Map Image", argstr="--outMasked %s")
    outMasked2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Masked T1-weighted Image", argstr="--outMasked2 %s")
    outMasked3 = traits.Either(traits.Bool, File(), hash_files=False, desc="Masked Filter Image", argstr="--outMasked3 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistBrainMp2rageSkullStrippingOutputSpec(TraitedSpec):
    outBrain = File(desc="Brain Mask Image", exists=True)
    outMasked = File(desc="Masked T1 Map Image", exists=True)
    outMasked2 = File(desc="Masked T1-weighted Image", exists=True)
    outMasked3 = File(desc="Masked Filter Image", exists=True)


class JistBrainMp2rageSkullStripping(SEMLikeCommandLine):
    """title: MP2RAGE Skull Stripping

category: Developer Tools

description: Estimate a brain mask for a MP2RAGE dataset. At least a T1-weighted or a T1 map image is required, the 'filter' image is optional.

version: 2.0.RC

"""

    input_spec = JistBrainMp2rageSkullStrippingInputSpec
    output_spec = JistBrainMp2rageSkullStrippingOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.brain.JistBrainMp2rageSkullStripping "
    _outputs_filenames = {'outBrain':'outBrain.nii','outMasked3':'outMasked3.nii','outMasked2':'outMasked2.nii','outMasked':'outMasked.nii'}


class JistLaminarROIAveragingInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inIntensity = File(desc="Intensity Profile Image", exists=True, argstr="--inIntensity %s")
    inROI = File(desc="ROI Mask", exists=True, argstr="--inROI %s")
    inROI2 = traits.Str(desc="ROI Name", argstr="--inROI2 %s")
    inMask = File(desc="Mask Image (opt, 3D or 4D)", exists=True, argstr="--inMask %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outROI3 = traits.Either(traits.Bool, File(), hash_files=False, desc="ROI Average", argstr="--outROI3 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistLaminarROIAveragingOutputSpec(TraitedSpec):
    outROI3 = File(desc="ROI Average", exists=True)


class JistLaminarROIAveraging(SEMLikeCommandLine):
    """title: Profile ROI Averaging

category: Developer Tools

description: Compute an average profile over a given ROI.

version: 1.0.RC

"""

    input_spec = JistLaminarROIAveragingInputSpec
    output_spec = JistLaminarROIAveragingOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.laminar.JistLaminarROIAveraging "
    _outputs_filenames = {'outROI3':'outROI3'}


class JistModuleNormalizeComplexImageInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inReal = File(desc="Real Image", exists=True, argstr="--inReal %s")
    inImaginary = File(desc="Imaginary Image", exists=True, argstr="--inImaginary %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outNormalized = traits.Either(traits.Bool, File(), hash_files=False, desc="Normalized Real Image", argstr="--outNormalized %s")
    outNormalized2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Normalized Imaginary Image", argstr="--outNormalized2 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleNormalizeComplexImageOutputSpec(TraitedSpec):
    outNormalized = File(desc="Normalized Real Image", exists=True)
    outNormalized2 = File(desc="Normalized Imaginary Image", exists=True)


class JistModuleNormalizeComplexImage(SEMLikeCommandLine):
    """title: Normalize Complex Image

category: Developer Tools

description: Converts real and imaginary images to magnitude and phase images.

version: 1.0.RC

"""

    input_spec = JistModuleNormalizeComplexImageInputSpec
    output_spec = JistModuleNormalizeComplexImageOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleNormalizeComplexImage "
    _outputs_filenames = {'outNormalized2':'outNormalized2.nii','outNormalized':'outNormalized.nii'}


class JistBrainMp2rageDuraEstimationInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inInv2 = File(desc="Inv2 Image", exists=True, argstr="--inInv2 %s")
    inSkull = File(desc="Skull Stripping Mask", exists=True, argstr="--inSkull %s")
    inDistance = traits.Float(desc="Distance to background (mm)", argstr="--inDistance %f")
    inoutput = traits.Enum("boundary", "dura_region", "dura_prior", "bg_prior", "intens_prior", desc="Outputs an estimate of the dura / CSF boundary or an estimate of the entire dura region.", argstr="--inoutput %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outDura = traits.Either(traits.Bool, File(), hash_files=False, desc="Dura Image", argstr="--outDura %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistBrainMp2rageDuraEstimationOutputSpec(TraitedSpec):
    outDura = File(desc="Dura Image", exists=True)


class JistBrainMp2rageDuraEstimation(SEMLikeCommandLine):
    """title: MP2RAGE Dura Estimation

category: Developer Tools

description: Filters a MP2RAGE brain image to obtain a probability map of dura matter.

version: 1.0.RC

"""

    input_spec = JistBrainMp2rageDuraEstimationInputSpec
    output_spec = JistBrainMp2rageDuraEstimationOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.brain.JistBrainMp2rageDuraEstimation "
    _outputs_filenames = {'outDura':'outDura.nii'}


class JistModuleMp2rageArteriesFilterInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inT1 = File(desc="T1 map Image", exists=True, argstr="--inT1 %s")
    inT1weighted = File(desc="T1-weighted Image", exists=True, argstr="--inT1weighted %s")
    inInv2 = File(desc="Inv2 Image", exists=True, argstr="--inInv2 %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outArteries = traits.Either(traits.Bool, File(), hash_files=False, desc="Arteries Image", argstr="--outArteries %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleMp2rageArteriesFilterOutputSpec(TraitedSpec):
    outArteries = File(desc="Arteries Image", exists=True)


class JistModuleMp2rageArteriesFilter(SEMLikeCommandLine):
    """title: MP2RAGE Arteries Filter

category: Developer Tools

description: Filters a MP2RAGE brain image to obtain a probability map of arteries.

version: 1.0.RC

"""

    input_spec = JistModuleMp2rageArteriesFilterInputSpec
    output_spec = JistModuleMp2rageArteriesFilterOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleMp2rageArteriesFilter "
    _outputs_filenames = {'outArteries':'outArteries.nii'}


class JistToolsMeshToLevelsetInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inSurface = File(desc="Surface", exists=True, argstr="--inSurface %s")
    inReference = File(desc="Reference volume to use for level set representation dimensions.", exists=True, argstr="--inReference %s")
    inAlign = traits.Enum("true", "false", desc="Align to MIPAV image space", argstr="--inAlign %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outLevel = traits.Either(traits.Bool, File(), hash_files=False, desc="Level Set", argstr="--outLevel %s")
    outAligned = traits.Either(traits.Bool, File(), hash_files=False, desc="Aligned Surface (opt)", argstr="--outAligned %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistToolsMeshToLevelsetOutputSpec(TraitedSpec):
    outLevel = File(desc="Level Set", exists=True)
    outAligned = File(desc="Aligned Surface (opt)", exists=True)


class JistToolsMeshToLevelset(SEMLikeCommandLine):
    """title: Mesh to Level Set

category: Developer Tools

description: Finds a volumetric level-set representation of an input surface. The topology rule relates to iso-surface generation.

version: 1.0.RC

"""

    input_spec = JistToolsMeshToLevelsetInputSpec
    output_spec = JistToolsMeshToLevelsetOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.tools.JistToolsMeshToLevelset "
    _outputs_filenames = {'outAligned':'outAligned','outLevel':'outLevel.nii'}


class JistModuleFastMatrixClusteringInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inMatrix = File(desc="Matrix file", exists=True, argstr="--inMatrix %s")
    inMatrix2 = traits.Int(desc="Matrix size", argstr="--inMatrix2 %d")
    inDistribution = traits.Enum("hotelling", "jensen-shannon", "gauss-avg-distance", "gauss-mmx-distance", "np-avg-distance", "np-mmx-distance", desc="Distribution metric", argstr="--inDistribution %s")
    inThreshold = traits.Float(desc="varies with algorithm: default is 0.5 for Jensen-Shannon, 0.05 for Hotelling, 0.0 for the rest", argstr="--inThreshold %f")
    inBasis = traits.Float(desc="proportion of original edges kept in the graph", argstr="--inBasis %f")
    inMin = traits.Float(desc="minimum ratio of volume to keep the clusters", argstr="--inMin %f")
    inMax = traits.Float(desc="maximum ratio of volume to keep the clusters", argstr="--inMax %f")
    inConnectivity = traits.Int(desc="Connectivity", argstr="--inConnectivity %d")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outinvalid = traits.Either(traits.Bool, File(), hash_files=False, desc="invalid", argstr="--outinvalid %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleFastMatrixClusteringOutputSpec(TraitedSpec):
    outinvalid = File(desc="invalid", exists=True)


class JistModuleFastMatrixClustering(SEMLikeCommandLine):
    """title: Fast Matrix Clustering

category: Developer Tools

description: Clusters connectivity matrix data aggregatively with various models.

version: 1.0.RC

"""

    input_spec = JistModuleFastMatrixClusteringInputSpec
    output_spec = JistModuleFastMatrixClusteringOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleFastMatrixClustering "
    _outputs_filenames = {'outinvalid':'outinvalid'}


class JistModuleCorticalProfileStatisticsInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inIntensity = File(desc="Intensity Profile Image", exists=True, argstr="--inIntensity %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outProfile = traits.Either(traits.Bool, File(), hash_files=False, desc="Profile Intensity Moments", argstr="--outProfile %s")
    outProfile2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Profile Geometric Moments", argstr="--outProfile2 %s")
    outProfile3 = traits.Either(traits.Bool, File(), hash_files=False, desc="Profile Edge Statistics", argstr="--outProfile3 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleCorticalProfileStatisticsOutputSpec(TraitedSpec):
    outProfile = File(desc="Profile Intensity Moments", exists=True)
    outProfile2 = File(desc="Profile Geometric Moments", exists=True)
    outProfile3 = File(desc="Profile Edge Statistics", exists=True)


class JistModuleCorticalProfileStatistics(SEMLikeCommandLine):
    """title: Profile Statistics

category: Developer Tools

description: Compute various statistics for a cortical profile.

version: 1.0.RC

"""

    input_spec = JistModuleCorticalProfileStatisticsInputSpec
    output_spec = JistModuleCorticalProfileStatisticsOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleCorticalProfileStatistics "
    _outputs_filenames = {'outProfile2':'outProfile2.nii','outProfile':'outProfile.nii','outProfile3':'outProfile3.nii'}


class JistModuleImageBoundaryInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inImage = File(desc="Image Volume", exists=True, argstr="--inImage %s")
    inImage2 = traits.Enum("zero", "min", "max", desc="Image boundary value", argstr="--inImage2 %s")
    inImage3 = traits.Int(desc="Image boundary size", argstr="--inImage3 %d")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outResult = traits.Either(traits.Bool, File(), hash_files=False, desc="Result Volume", argstr="--outResult %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleImageBoundaryOutputSpec(TraitedSpec):
    outResult = File(desc="Result Volume", exists=True)


class JistModuleImageBoundary(SEMLikeCommandLine):
    """title: Image Boundary

category: Developer Tools

description: Sets the values at the image boundary to specific values

version: 1.10.RC

documentation-url: http://www.cbs.mpg.de/

"""

    input_spec = JistModuleImageBoundaryInputSpec
    output_spec = JistModuleImageBoundaryOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleImageBoundary "
    _outputs_filenames = {'outResult':'outResult.nii'}


class JistModuleCorticalProfileFeaturesInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inIntensity = File(desc="Intensity Profile Image", exists=True, argstr="--inIntensity %s")
    inScaling = traits.Float(desc="Scaling parameter", argstr="--inScaling %f")
    inProfile = traits.Enum("equal", "percentage", "distance", desc="Profile weighting", argstr="--inProfile %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outProfile2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Profile Intensity Mean", argstr="--outProfile2 %s")
    outProfile3 = traits.Either(traits.Bool, File(), hash_files=False, desc="Profile Intensity Slope", argstr="--outProfile3 %s")
    outProfile4 = traits.Either(traits.Bool, File(), hash_files=False, desc="Profile Intensity Quadrature", argstr="--outProfile4 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleCorticalProfileFeaturesOutputSpec(TraitedSpec):
    outProfile2 = File(desc="Profile Intensity Mean", exists=True)
    outProfile3 = File(desc="Profile Intensity Slope", exists=True)
    outProfile4 = File(desc="Profile Intensity Quadrature", exists=True)


class JistModuleCorticalProfileFeatures(SEMLikeCommandLine):
    """title: Profile Features

category: Developer Tools

description: Compute various features for an intensity map along a cortical profile.

version: 1.0.RC

"""

    input_spec = JistModuleCorticalProfileFeaturesInputSpec
    output_spec = JistModuleCorticalProfileFeaturesOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleCorticalProfileFeatures "
    _outputs_filenames = {'outProfile2':'outProfile2.nii','outProfile3':'outProfile3.nii','outProfile4':'outProfile4.nii'}


class JistModuleMapProfileSampling2T1mapInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inT1 = File(desc="T1 Map or Intensity Image", exists=True, argstr="--inT1 %s")
    inProfile = File(desc="Profile Sampling Image", exists=True, argstr="--inProfile %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outmasked = traits.Either(traits.Bool, File(), hash_files=False, desc="masked T1map", argstr="--outmasked %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleMapProfileSampling2T1mapOutputSpec(TraitedSpec):
    outmasked = File(desc="masked T1map", exists=True)


class JistModuleMapProfileSampling2T1map(SEMLikeCommandLine):
    """title: MapProfileSampling2T1map

category: Developer Tools

description: Method masks the outlines of the profile samplings onto the T1map such that only the cortex remains.

version: 1.0.RC

"""

    input_spec = JistModuleMapProfileSampling2T1mapInputSpec
    output_spec = JistModuleMapProfileSampling2T1mapOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleMapProfileSampling2T1map "
    _outputs_filenames = {'outmasked':'outmasked.nii'}


class JistToolsIntensityNormalizationInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inInput = File(desc="Input Image", exists=True, argstr="--inInput %s")
    inMask = File(desc="Mask Image", exists=True, argstr="--inMask %s")
    innormalization = traits.Enum("linear", "robust", "positive-robust", desc="linear: use the whole range [Imin,Imax]; robust: use a truncated version of [Imin,Imax]; positive-robust: use a truncated version of [0,Imax]", argstr="--innormalization %s")
    inRobustness = traits.Float(desc="ratio of discarded values below Imin and above Imax (in [0,1])", argstr="--inRobustness %f")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outNormalized = traits.Either(traits.Bool, File(), hash_files=False, desc="Normalized Image", argstr="--outNormalized %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistToolsIntensityNormalizationOutputSpec(TraitedSpec):
    outNormalized = File(desc="Normalized Image", exists=True)


class JistToolsIntensityNormalization(SEMLikeCommandLine):
    """title: Intensity Normalization

category: Developer Tools

description: Outputs a normalized version of the image in [0,1].

version: 1.0.RC

"""

    input_spec = JistToolsIntensityNormalizationInputSpec
    output_spec = JistToolsIntensityNormalizationOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.tools.JistToolsIntensityNormalization "
    _outputs_filenames = {'outNormalized':'outNormalized.nii'}


class JistModuleLevelsetToMeshInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inLevelset = File(desc="Levelset Image", exists=True, argstr="--inLevelset %s")
    inTopology = traits.Enum("26/6", "6/26", "18/6", "6/18", "6/6", "wcs", "wco", "no", desc="Topology", argstr="--inTopology %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outSurface = traits.Either(traits.Bool, File(), hash_files=False, desc="Surface", argstr="--outSurface %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleLevelsetToMeshOutputSpec(TraitedSpec):
    outSurface = File(desc="Surface", exists=True)


class JistModuleLevelsetToMesh(SEMLikeCommandLine):
    """title: Surface Mesh Extraction

category: Developer Tools

description: Extracts a surface mesh from a levelset function.

version: 1.0.RC

"""

    input_spec = JistModuleLevelsetToMeshInputSpec
    output_spec = JistModuleLevelsetToMeshOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleLevelsetToMesh "
    _outputs_filenames = {'outSurface':'outSurface'}


class JistModuleMp2rageSimulatorInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inSegmented = File(desc="Segmented Image", exists=True, argstr="--inSegmented %s")
    inAtlas = File(desc="Atlas file", exists=True, argstr="--inAtlas %s")
    inOutput = traits.Float(desc="Output Image Resolution (mm)", argstr="--inOutput %f")
    inNoise = traits.Float(desc="Noise level (ratio)", argstr="--inNoise %f")
    inVariability = traits.Float(desc="Variability level (ratio)", argstr="--inVariability %f")
    inSimulation = traits.Enum("gaussian", "mean_var", "empirical", "double_noise", desc="Use a different model of signal and noise", argstr="--inSimulation %s")
    inIso = traits.Float(desc="Iso Intensity range [0-R]:", argstr="--inIso %f")
    inT1 = traits.Float(desc="T1 intensity range [0-R]:", argstr="--inT1 %f")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outIso2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Iso Image", argstr="--outIso2 %s")
    outT12 = traits.Either(traits.Bool, File(), hash_files=False, desc="T1 Map Image", argstr="--outT12 %s")
    outMask = traits.Either(traits.Bool, File(), hash_files=False, desc="Mask Image", argstr="--outMask %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleMp2rageSimulatorOutputSpec(TraitedSpec):
    outIso2 = File(desc="Iso Image", exists=True)
    outT12 = File(desc="T1 Map Image", exists=True)
    outMask = File(desc="Mask Image", exists=True)


class JistModuleMp2rageSimulator(SEMLikeCommandLine):
    """title: Mp2rage Simulator

category: Developer Tools

description: Simulates a MP2RAGE brain image based on atlas priors.

version: 1.0.RC

"""

    input_spec = JistModuleMp2rageSimulatorInputSpec
    output_spec = JistModuleMp2rageSimulatorOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleMp2rageSimulator "
    _outputs_filenames = {'outMask':'outMask.nii','outIso2':'outIso2.nii','outT12':'outT12.nii'}


class JistModuleROIMembershipInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inROI = File(desc="ROI Mask (opt, full brain if not given)", exists=True, argstr="--inROI %s")
    inROI2 = traits.Str(desc="ROI Name", argstr="--inROI2 %s")
    inIntensity = File(desc="Intensity Profile Image", exists=True, argstr="--inIntensity %s")
    inMask = File(desc="Mask Image (opt, 3D or 4D)", exists=True, argstr="--inMask %s")
    inStatistical = File(desc="Statistical Atlas", exists=True, argstr="--inStatistical %s")
    inGaussian = traits.Float(desc="Gaussian FWHM (mm)", argstr="--inGaussian %f")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outDebug = traits.Either(traits.Bool, File(), hash_files=False, desc="Debug data", argstr="--outDebug %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleROIMembershipOutputSpec(TraitedSpec):
    outDebug = File(desc="Debug data", exists=True)


class JistModuleROIMembership(SEMLikeCommandLine):
    """title: Profile ROI Membership

category: Developer Tools

description: Compute profile membership functions of several ROIs.

version: 1.0.RC

"""

    input_spec = JistModuleROIMembershipInputSpec
    output_spec = JistModuleROIMembershipOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleROIMembership "
    _outputs_filenames = {'outDebug':'outDebug.nii'}


class JistToolsImageCombinationsInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inVolume = File(desc="Volume 1", exists=True, argstr="--inVolume %s")
    inVolume2 = File(desc="Volume 2", exists=True, argstr="--inVolume2 %s")
    inOperation = traits.Enum("Min", "Max", "SignedMax", "Stack", desc="Operation", argstr="--inOperation %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outResult = traits.Either(traits.Bool, File(), hash_files=False, desc="Result Volume", argstr="--outResult %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistToolsImageCombinationsOutputSpec(TraitedSpec):
    outResult = File(desc="Result Volume", exists=True)


class JistToolsImageCombinations(SEMLikeCommandLine):
    """title: Image Combinations

category: Developer Tools

description: Perform simple image combination operations on two images. The operations include 'Min', 'Max', 
 'SignedMax' (=I1 if I1>I2, =-I2 else), 'Stack' (=I1 if I1>I2, =max(I1)+I2+1 else)

version: 1.10.RC

documentation-url: http://www.cbs.mpg.de/

"""

    input_spec = JistToolsImageCombinationsInputSpec
    output_spec = JistToolsImageCombinationsOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.tools.JistToolsImageCombinations "
    _outputs_filenames = {'outResult':'outResult.nii'}


class JistModulePVCSFandArteriesFilterInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inInput = File(desc="Input Image (not masked)", exists=True, argstr="--inInput %s")
    inData = traits.Enum("T1_map", "T1-weighted", desc="Data type", argstr="--inData %s")
    inSkull = File(desc="Skull Stripping Mask", exists=True, argstr="--inSkull %s")
    infirst = traits.Float(desc="first resolution (mm)", argstr="--infirst %f")
    inlast = traits.Float(desc="last resolution (mm)", argstr="--inlast %f")
    infiltering = traits.Int(desc="filtering steps", argstr="--infiltering %d")
    inPV = traits.Float(desc="PV intensity scale", argstr="--inPV %f")
    inarteries = traits.Float(desc="arteries intensity scale", argstr="--inarteries %f")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outPartial = traits.Either(traits.Bool, File(), hash_files=False, desc="Partial Volume Image", argstr="--outPartial %s")
    outArteries = traits.Either(traits.Bool, File(), hash_files=False, desc="Arteries Image", argstr="--outArteries %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModulePVCSFandArteriesFilterOutputSpec(TraitedSpec):
    outPartial = File(desc="Partial Volume Image", exists=True)
    outArteries = File(desc="Arteries Image", exists=True)


class JistModulePVCSFandArteriesFilter(SEMLikeCommandLine):
    """title: PV CSF and Arteries Filter

category: Developer Tools

description: Filters an image for regions of partial voluming and arteries assuming a tubular / ridge-like model of intensity.

version: 1.0.RC

"""

    input_spec = JistModulePVCSFandArteriesFilterInputSpec
    output_spec = JistModulePVCSFandArteriesFilterOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModulePVCSFandArteriesFilter "
    _outputs_filenames = {'outArteries':'outArteries.nii','outPartial':'outPartial.nii'}


class JistToolsExtractBrainRegionInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inSegmentation = File(desc="Segmentation Image", exists=True, argstr="--inSegmentation %s")
    inLevelset = File(desc="Levelset Boundary Image", exists=True, argstr="--inLevelset %s")
    inProbability = File(desc="Probability Function Image", exists=True, argstr="--inProbability %s")
    inProbability2 = File(desc="Probability Label Image", exists=True, argstr="--inProbability2 %s")
    inAtlas = File(desc="Atlas file", exists=True, argstr="--inAtlas %s")
    inRegion = traits.Enum("left_cerebrum", "right_cerebrum", "cerebrum", "cerebellum", "cerebellum_brainstem", "subcortex", "tissues(anat)", "tissues(func)", desc="Region", argstr="--inRegion %s")
    inNormalize = traits.Enum("true", "false", desc="Normalize probabilities", argstr="--inNormalize %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outInside = traits.Either(traits.Bool, File(), hash_files=False, desc="Inside (WM) Mask", argstr="--outInside %s")
    outStructure = traits.Either(traits.Bool, File(), hash_files=False, desc="Structure (GM) Mask", argstr="--outStructure %s")
    outInside2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Inside (WM) Leveset", argstr="--outInside2 %s")
    outStructure2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Structure (GM) Levelset", argstr="--outStructure2 %s")
    outBackground = traits.Either(traits.Bool, File(), hash_files=False, desc="Background (CSF) Levelset", argstr="--outBackground %s")
    outInside3 = traits.Either(traits.Bool, File(), hash_files=False, desc="Inside (WM) Probability", argstr="--outInside3 %s")
    outStructure3 = traits.Either(traits.Bool, File(), hash_files=False, desc="Structure (GM) Probability", argstr="--outStructure3 %s")
    outBackground2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Background (CSF) Probability", argstr="--outBackground2 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistToolsExtractBrainRegionOutputSpec(TraitedSpec):
    outInside = File(desc="Inside (WM) Mask", exists=True)
    outStructure = File(desc="Structure (GM) Mask", exists=True)
    outInside2 = File(desc="Inside (WM) Leveset", exists=True)
    outStructure2 = File(desc="Structure (GM) Levelset", exists=True)
    outBackground = File(desc="Background (CSF) Levelset", exists=True)
    outInside3 = File(desc="Inside (WM) Probability", exists=True)
    outStructure3 = File(desc="Structure (GM) Probability", exists=True)
    outBackground2 = File(desc="Background (CSF) Probability", exists=True)


class JistToolsExtractBrainRegion(SEMLikeCommandLine):
    """title: Extract Brain Region

category: Developer Tools

description: Extract a selected region of interest from a multi-object representation, based on atlas definitions.

version: 1.0.RC

"""

    input_spec = JistToolsExtractBrainRegionInputSpec
    output_spec = JistToolsExtractBrainRegionOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.tools.JistToolsExtractBrainRegion "
    _outputs_filenames = {'outStructure2':'outStructure2.nii','outStructure3':'outStructure3.nii','outInside2':'outInside2.nii','outInside3':'outInside3.nii','outBackground':'outBackground.nii','outInside':'outInside.nii','outBackground2':'outBackground2.nii','outStructure':'outStructure.nii'}


class JistModuleROIAveragingProfileInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inT1 = File(desc="T1 Map or Intensity Image", exists=True, argstr="--inT1 %s")
    inAtlas = File(desc="Atlas", exists=True, argstr="--inAtlas %s")
    inProfile = File(desc="Profile Surfaces", exists=True, argstr="--inProfile %s")
    inThreshold = traits.Int(desc="Threshold Stat. Atlas", argstr="--inThreshold %d")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outLayer = traits.Either(traits.Bool, File(), hash_files=False, desc="Layer Image ", argstr="--outLayer %s")
    outStatistics = traits.Either(traits.Bool, File(), hash_files=False, desc="Statistics per Layer ", argstr="--outStatistics %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleROIAveragingProfileOutputSpec(TraitedSpec):
    outLayer = File(desc="Layer Image ", exists=True)
    outStatistics = File(desc="Statistics per Layer ", exists=True)


class JistModuleROIAveragingProfile(SEMLikeCommandLine):
    """title: ROI Averaging Profiles

category: Developer Tools

description: Method computes the average across layers under a defined ROI (atlas).

version: 1.0.RC

"""

    input_spec = JistModuleROIAveragingProfileInputSpec
    output_spec = JistModuleROIAveragingProfileOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleROIAveragingProfile "
    _outputs_filenames = {'outStatistics':'outStatistics.nii','outLayer':'outLayer.nii'}


class JistModuleAnatomicallyConsistentEnhanceInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inWhite = File(desc="White Matter Image", exists=True, argstr="--inWhite %s")
    inGray = File(desc="Gray Matter Image", exists=True, argstr="--inGray %s")
    inSulcal = File(desc="Sulcal CSF Image", exists=True, argstr="--inSulcal %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outEnhanced = traits.Either(traits.Bool, File(), hash_files=False, desc="Enhanced GM", argstr="--outEnhanced %s")
    outEnhanced2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Enhanced CSF", argstr="--outEnhanced2 %s")
    outThinned = traits.Either(traits.Bool, File(), hash_files=False, desc="Thinned Skeleton", argstr="--outThinned %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleAnatomicallyConsistentEnhanceOutputSpec(TraitedSpec):
    outEnhanced = File(desc="Enhanced GM", exists=True)
    outEnhanced2 = File(desc="Enhanced CSF", exists=True)
    outThinned = File(desc="Thinned Skeleton", exists=True)


class JistModuleAnatomicallyConsistentEnhance(SEMLikeCommandLine):
    """title: Anatomy Consistent CSF Enhancement

category: Developer Tools

description: Anatomically Consistent Enhancement. It takes the GM membership and enhances deep sulcal CSF.
C. Xu, X. Han, J.L. Prince, Improving Cortical Surface Reconstruction Accuracy Using an Anatomically Consistent Gray Matter Representation, NeuroImage Human Brain Mapping 2000 Meeting, Poster N. 581, NeuroImage Vol. 11, No. 5, May 2000.

version: 1.25.RC

documentation-url: http://www.iacl.ece.jhu.edu/(debug)

contributor: Chenyang Xu (chenyang.xu@siemens.com) http://www.iacl.ece.jhu.edu/~chenyang/

"""

    input_spec = JistModuleAnatomicallyConsistentEnhanceInputSpec
    output_spec = JistModuleAnatomicallyConsistentEnhanceOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleAnatomicallyConsistentEnhance "
    _outputs_filenames = {'outEnhanced2':'outEnhanced2.nii','outEnhanced':'outEnhanced.nii','outThinned':'outThinned.nii'}


class JistModuleSmoothCorticalDataInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inData = File(desc="Data Image", exists=True, argstr="--inData %s")
    inAverage = File(desc="Average Levelset Image", exists=True, argstr="--inAverage %s")
    inGreyWhite = File(desc="Grey-White Levelset Image", exists=True, argstr="--inGreyWhite %s")
    inCSFGrey = File(desc="CSF-Grey Levelset Image", exists=True, argstr="--inCSFGrey %s")
    inMask = File(desc="Mask Image", exists=True, argstr="--inMask %s")
    inGaussian = traits.Float(desc="Gaussian FWHM (mm)", argstr="--inGaussian %f")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outSmoothed = traits.Either(traits.Bool, File(), hash_files=False, desc="Smoothed Data Image", argstr="--outSmoothed %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleSmoothCorticalDataOutputSpec(TraitedSpec):
    outSmoothed = File(desc="Smoothed Data Image", exists=True)


class JistModuleSmoothCorticalData(SEMLikeCommandLine):
    """title: Smooth Cortical Data

category: Developer Tools

description: Smooths cortical data using dilation and Gaussian weighting.

version: 1.0.RC

"""

    input_spec = JistModuleSmoothCorticalDataInputSpec
    output_spec = JistModuleSmoothCorticalDataOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleSmoothCorticalData "
    _outputs_filenames = {'outSmoothed':'outSmoothed.nii'}


class JistModuleAggregativeSliceClusteringInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inHistology = File(desc="Histology Image", exists=True, argstr="--inHistology %s")
    inMask = File(desc="Mask Image", exists=True, argstr="--inMask %s")
    inSlice = traits.Enum("X", "Y", "Z", desc="Slice direction", argstr="--inSlice %s")
    inDistribution = traits.Enum("hotelling", "jensen-shannon", "gauss-avg-distance", "gauss-avg-correlation", "gauss-mmx-distance", "gauss-mmx-correlation", "np-avg-distance", "np-avg-correlation", "np-mmx-distance", "np-mmx-correlation", "graph-based-distance", "graph-based-correlation", desc="Distribution metric", argstr="--inDistribution %s")
    inThreshold = traits.Float(desc="varies with algorithm: default is 0.5 for Jensen-Shannon, 0.05 for Hotelling, 0.0 for the rest", argstr="--inThreshold %f")
    inBasis = traits.Float(desc="number of voxels used in regularization (graph-based) and covariance approximation (Jensen-Shannon, Hotelling)", argstr="--inBasis %f")
    inMin = traits.Float(desc="minimum ratio of volume to keep the clusters", argstr="--inMin %f")
    inMax = traits.Float(desc="maximum ratio of volume to keep the clusters", argstr="--inMax %f")
    inConnectivity = traits.Int(desc="Connectivity", argstr="--inConnectivity %d")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outClusters = traits.Either(traits.Bool, File(), hash_files=False, desc="Clusters", argstr="--outClusters %s")
    outClusters2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Clusters2", argstr="--outClusters2 %s")
    outMean = traits.Either(traits.Bool, File(), hash_files=False, desc="Mean", argstr="--outMean %s")
    outStdev = traits.Either(traits.Bool, File(), hash_files=False, desc="Stdev", argstr="--outStdev %s")
    outEdges = traits.Either(traits.Bool, File(), hash_files=False, desc="Edges", argstr="--outEdges %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleAggregativeSliceClusteringOutputSpec(TraitedSpec):
    outClusters = File(desc="Clusters", exists=True)
    outClusters2 = File(desc="Clusters2", exists=True)
    outMean = File(desc="Mean", exists=True)
    outStdev = File(desc="Stdev", exists=True)
    outEdges = File(desc="Edges", exists=True)


class JistModuleAggregativeSliceClustering(SEMLikeCommandLine):
    """title: Aggregative Slice Clustering

category: Developer Tools

description: Clusters histology data slice by slice.

version: 1.0.RC

"""

    input_spec = JistModuleAggregativeSliceClusteringInputSpec
    output_spec = JistModuleAggregativeSliceClusteringOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleAggregativeSliceClustering "
    _outputs_filenames = {'outMean':'outMean.nii','outClusters2':'outClusters2.nii','outEdges':'outEdges.nii','outStdev':'outStdev.nii','outClusters':'outClusters.nii'}


class MedicAlgorithmSPECTRE2010InputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inInput = File(desc="Input volume to be skullstripped.", exists=True, argstr="--inInput %s")
    inAtlas = File(desc="SPECTRE atlas description file. A text file enumerating atlas files and landmarks.", exists=True, argstr="--inAtlas %s")
    inInitial = traits.Int(desc="Erosion of the inital mask, which is based on the probability mask and the classification., The initial mask is ouput as the d0 volume at the conclusion of SPECTRE.", argstr="--inInitial %d")
    inImage = traits.Enum("T1_SPGR", "T1_ALT", "T1_MPRAGE", "T2", "FLAIR", desc="Set the image modality. MP-RAGE is recommended for most T1 sequence images.", argstr="--inImage %s")
    inOutput = traits.Enum("true", "false", desc="Determines if the output results are transformed back into the space of the original input image.", argstr="--inOutput %s")
    inFind = traits.Enum("true", "false", desc="Find Midsaggital Plane", argstr="--inFind %s")
    inRun = traits.Enum("true", "false", desc="Run Smooth Brain Mask", argstr="--inRun %s")
    inResample = traits.Enum("true", "false", desc="Determines if the data is resampled to be isotropic during the processing.", argstr="--inResample %s")
    inInitial2 = traits.Float(desc="Initial probability threshold", argstr="--inInitial2 %f")
    inMinimum = traits.Float(desc="Minimum probability threshold", argstr="--inMinimum %f")
    inMMC = traits.Int(desc="The size of the dilation step within the Modified Morphological Closing.", argstr="--inMMC %d")
    inMMC2 = traits.Int(desc="The size of the erosion step within the Modified Morphological Closing.", argstr="--inMMC2 %d")
    inInhomogeneity = traits.Enum("true", "false", desc="Set to false by default, this parameter will make FANTASM try to do inhomogeneity correction during it's iterative cycle.", argstr="--inInhomogeneity %s")
    inSmoothing = traits.Float(argstr="--inSmoothing %f")
    inBackground = traits.Float(argstr="--inBackground %f")
    inOutput2 = traits.Enum("true", "false", desc="Output Plane?", argstr="--inOutput2 %s")
    inOutput3 = traits.Enum("true", "false", desc="Output Split-Halves?", argstr="--inOutput3 %s")
    inOutput4 = traits.Enum("true", "false", desc="Output Segmentation on Plane?", argstr="--inOutput4 %s")
    inDegrees = traits.Enum("Rigid - 6", "Global rescale - 7", "Specific rescale - 9", "Affine - 12", desc="Degrees of freedom", argstr="--inDegrees %s")
    inCost = traits.Enum("Correlation ratio", "Least squares", "Normalized cross correlation", "Normalized mutual information", desc="Cost function", argstr="--inCost %s")
    inRegistration = traits.Enum("Trilinear", "Bspline 3rd order", "Bspline 4th order", "Cubic Lagrangian", "Quintic Lagrangian", "Heptic Lagrangian", "Windowed sinc", desc="Registration interpolation", argstr="--inRegistration %s")
    inOutput5 = traits.Enum("Trilinear", "Bspline 3rd order", "Bspline 4th order", "Cubic Lagrangian", "Quintic Lagrangian", "Heptic Lagrangian", "Windowed sinc", "Nearest Neighbor", desc="Output interpolation", argstr="--inOutput5 %s")
    inApply = traits.Enum("All", "X", "Y", "Z", desc="Apply rotation", argstr="--inApply %s")
    inMinimum2 = traits.Float(desc="Minimum angle", argstr="--inMinimum2 %f")
    inMaximum = traits.Float(desc="Maximum angle", argstr="--inMaximum %f")
    inCoarse = traits.Float(desc="Coarse angle increment", argstr="--inCoarse %f")
    inFine = traits.Float(desc="Fine angle increment", argstr="--inFine %f")
    inMultiple = traits.Int(desc="Multiple of tolerance to bracket the minimum", argstr="--inMultiple %d")
    inNumber = traits.Int(desc="Number of iterations", argstr="--inNumber %d")
    inNumber2 = traits.Int(desc="Number of minima from Level 8 to test at Level 4", argstr="--inNumber2 %d")
    inUse = traits.Enum("true", "false", desc="Use the max of the min resolutions of the two datasets when resampling", argstr="--inUse %s")
    inSubsample = traits.Enum("true", "false", desc="Subsample image for speed", argstr="--inSubsample %s")
    inSkip = traits.Enum("true", "false", desc="Skip multilevel search (Assume images are close to alignment)", argstr="--inSkip %s")
    inMultithreading = traits.Enum("true", "false", desc="Set to false by default, this parameter controls the multithreaded behavior of the linear registration.", argstr="--inMultithreading %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outOriginal = traits.Either(traits.Bool, File(), hash_files=False, desc="If Output in Original Space Flag is true then outputs the original input volume. Otherwise outputs the axialy reoriented input volume.", argstr="--outOriginal %s")
    outStripped = traits.Either(traits.Bool, File(), hash_files=False, desc="Skullstripped result of the input volume with just the brain.", argstr="--outStripped %s")
    outMask = traits.Either(traits.Bool, File(), hash_files=False, desc="Binary Mask of the skullstripped result with just the brain", argstr="--outMask %s")
    outPrior = traits.Either(traits.Bool, File(), hash_files=False, desc="Probability prior from the atlas registrations", argstr="--outPrior %s")
    outFANTASM = traits.Either(traits.Bool, File(), hash_files=False, desc="Tissue classification of of the whole input volume.", argstr="--outFANTASM %s")
    outd0 = traits.Either(traits.Bool, File(), hash_files=False, desc="Initial Brainmask", argstr="--outd0 %s")
    outMidsagittal = traits.Either(traits.Bool, File(), hash_files=False, desc="Plane dividing the brain hemispheres", argstr="--outMidsagittal %s")
    outSplitHalves = traits.Either(traits.Bool, File(), hash_files=False, desc="Skullstripped mask of the brain with the hemispheres divided.", argstr="--outSplitHalves %s")
    outSegmentation = traits.Either(traits.Bool, File(), hash_files=False, desc="2D image showing the tissue classification on the midsagittal plane", argstr="--outSegmentation %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class MedicAlgorithmSPECTRE2010OutputSpec(TraitedSpec):
    outOriginal = File(desc="If Output in Original Space Flag is true then outputs the original input volume. Otherwise outputs the axialy reoriented input volume.", exists=True)
    outStripped = File(desc="Skullstripped result of the input volume with just the brain.", exists=True)
    outMask = File(desc="Binary Mask of the skullstripped result with just the brain", exists=True)
    outPrior = File(desc="Probability prior from the atlas registrations", exists=True)
    outFANTASM = File(desc="Tissue classification of of the whole input volume.", exists=True)
    outd0 = File(desc="Initial Brainmask", exists=True)
    outMidsagittal = File(desc="Plane dividing the brain hemispheres", exists=True)
    outSplitHalves = File(desc="Skullstripped mask of the brain with the hemispheres divided.", exists=True)
    outSegmentation = File(desc="2D image showing the tissue classification on the midsagittal plane", exists=True)


class MedicAlgorithmSPECTRE2010(SEMLikeCommandLine):
    """title: SPECTRE 2010

category: Developer Tools

description: Simple Paradigm for Extra-Cranial Tissue REmoval
################################################
Algorithm Version: 1.10
GUI Version: 1.16

A. Carass, M.B. Wheeler, J. Cuzzocre, P.-L. Bazin, S.S. Bassett, and J.L. Prince, 'A Joint Registration and Segmentation Approach to Skull Stripping', Fourth IEEE International Symposium on Biomedical Imaging (ISBI 2007), Arlington, VA, April 12-15, 2007.
A. Carass, J. Cuzzocre, M.B. Wheeler, P.-L. Bazin, S.M. Resnick, and J.L. Prince, 'Simple paradigm for extra-cerebral tissue removal: Algorithm and analysis', NeuroImage 56(4):1982-1992, 2011.

version: 1.10.R

documentation-url: http://www.iacl.ece.jhu.edu/

contributor: Aaron Carass (aaron_carass@jhu.edu) http://www.iacl.ece.jhu.edu/
Hanlin Wan (hanlinwan@gmail.com)

"""

    input_spec = MedicAlgorithmSPECTRE2010InputSpec
    output_spec = MedicAlgorithmSPECTRE2010OutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run edu.jhu.ece.iacl.plugins.segmentation.skull_strip.MedicAlgorithmSPECTRE2010 "
    _outputs_filenames = {'outd0':'outd0.nii','outOriginal':'outOriginal.nii','outMask':'outMask.nii','outSplitHalves':'outSplitHalves.nii','outMidsagittal':'outMidsagittal.nii','outPrior':'outPrior.nii','outFANTASM':'outFANTASM.nii','outSegmentation':'outSegmentation.nii','outStripped':'outStripped.nii'}


class JistLaminarProfileSamplingInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inProfile = File(desc="Profile Surface Image", exists=True, argstr="--inProfile %s")
    inIntensity = File(desc="Intensity Image", exists=True, argstr="--inIntensity %s")
    inCortex = File(desc="Cortex Mask (opt)", exists=True, argstr="--inCortex %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outProfile2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Profile Mappings", argstr="--outProfile2 %s")
    outProfile3 = traits.Either(traits.Bool, File(), hash_files=False, desc="Profile 4D Mask", argstr="--outProfile3 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistLaminarProfileSamplingOutputSpec(TraitedSpec):
    outProfile2 = File(desc="Profile Mappings", exists=True)
    outProfile3 = File(desc="Profile 4D Mask", exists=True)


class JistLaminarProfileSampling(SEMLikeCommandLine):
    """title: Profile Sampling

category: Developer Tools

description: Sample some intensity image along a cortical layers surface.

version: 1.0.RC

"""

    input_spec = JistLaminarProfileSamplingInputSpec
    output_spec = JistLaminarProfileSamplingOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.laminar.JistLaminarProfileSampling "
    _outputs_filenames = {'outProfile2':'outProfile2.nii','outProfile3':'outProfile3.nii'}


class JistModuleIntensityBoundsInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inImage = File(desc="Image Volume", exists=True, argstr="--inImage %s")
    inBounds = traits.Enum("raw_intensity", "normalized", "robust", desc="Bounds definition", argstr="--inBounds %s")
    inMin = traits.Float(desc="Min", argstr="--inMin %f")
    inMax = traits.Float(desc="Max", argstr="--inMax %f")
    inNormalize = traits.Enum("true", "false", desc="Normalize output", argstr="--inNormalize %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outResult = traits.Either(traits.Bool, File(), hash_files=False, desc="Result Volume", argstr="--outResult %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleIntensityBoundsOutputSpec(TraitedSpec):
    outResult = File(desc="Result Volume", exists=True)


class JistModuleIntensityBounds(SEMLikeCommandLine):
    """title: Intensity Bounds

category: Developer Tools

description: Perform simple intensity thresholding into a [min, max] interval.

version: 1.10.RC

documentation-url: http://www.cbs.mpg.de/

"""

    input_spec = JistModuleIntensityBoundsInputSpec
    output_spec = JistModuleIntensityBoundsOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleIntensityBounds "
    _outputs_filenames = {'outResult':'outResult.nii'}


class JistModuleSmoothCorticalData4DInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inGWB = File(desc="GWB Levelset Image", exists=True, argstr="--inGWB %s")
    inCGB = File(desc="CGB Levelset Image", exists=True, argstr="--inCGB %s")
    inData = File(desc="Data Image", exists=True, argstr="--inData %s")
    inGaussian = traits.Float(desc="Gaussian FWHM (mm)", argstr="--inGaussian %f")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outSmoothed = traits.Either(traits.Bool, File(), hash_files=False, desc="Smoothed Data Image", argstr="--outSmoothed %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleSmoothCorticalData4DOutputSpec(TraitedSpec):
    outSmoothed = File(desc="Smoothed Data Image", exists=True)


class JistModuleSmoothCorticalData4D(SEMLikeCommandLine):
    """title: Smooth Cortical Data 4D

category: Developer Tools

description: Smooths data using a Gaussian weighting as a function of the minimum marching distance in the cortex.

version: 1.0.RC

"""

    input_spec = JistModuleSmoothCorticalData4DInputSpec
    output_spec = JistModuleSmoothCorticalData4DOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleSmoothCorticalData4D "
    _outputs_filenames = {'outSmoothed':'outSmoothed.nii'}


class JistModuleRelabelSegmentationInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inSegmentation = File(desc="Segmentation Image", exists=True, argstr="--inSegmentation %s")
    inRelabeling = File(desc="Re-labeling list", exists=True, argstr="--inRelabeling %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outRelabeled = traits.Either(traits.Bool, File(), hash_files=False, desc="Relabeled Segmentation", argstr="--outRelabeled %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleRelabelSegmentationOutputSpec(TraitedSpec):
    outRelabeled = File(desc="Relabeled Segmentation", exists=True)


class JistModuleRelabelSegmentation(SEMLikeCommandLine):
    """title: Relabel Segmentation

category: Developer Tools

description: Relabel a segmentation image based on a list of label correspondences.

version: 1.0.RC

"""

    input_spec = JistModuleRelabelSegmentationInputSpec
    output_spec = JistModuleRelabelSegmentationOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleRelabelSegmentation "
    _outputs_filenames = {'outRelabeled':'outRelabeled.nii'}


class JistModuleHeatKernelCorticalSmoothingInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inCortical = File(desc="Cortical Data", exists=True, argstr="--inCortical %s")
    inCortical2 = File(desc="Cortical Mask", exists=True, argstr="--inCortical2 %s")
    inFWHM = traits.Float(desc="FWHM (mm)", argstr="--inFWHM %f")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outSmoothed = traits.Either(traits.Bool, File(), hash_files=False, desc="Smoothed Data", argstr="--outSmoothed %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleHeatKernelCorticalSmoothingOutputSpec(TraitedSpec):
    outSmoothed = File(desc="Smoothed Data", exists=True)


class JistModuleHeatKernelCorticalSmoothing(SEMLikeCommandLine):
    """title: Iterative Cortical Smoothing

category: Developer Tools

description: Smooths cortical data using a heat kernel approach: an interative algorithm that uses a weighted average of the data at each voxel with its nearest neighbours

version: 0.1.RC

"""

    input_spec = JistModuleHeatKernelCorticalSmoothingInputSpec
    output_spec = JistModuleHeatKernelCorticalSmoothingOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleHeatKernelCorticalSmoothing "
    _outputs_filenames = {'outSmoothed':'outSmoothed.nii'}


class JistModuleExtractMultiObjectDataInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inLabel = File(desc="Label Image", exists=True, argstr="--inLabel %s")
    inFunction = File(desc="Function Image", exists=True, argstr="--inFunction %s")
    inAtlas = File(desc="Atlas file", exists=True, argstr="--inAtlas %s")
    inObject = traits.Str(desc="Object name", argstr="--inObject %s")
    inObject2 = traits.Int(desc="Object id", argstr="--inObject2 %d")
    inData = traits.Enum("levelset", "probability", "membership", desc="Data type", argstr="--inData %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outExtracted = traits.Either(traits.Bool, File(), hash_files=False, desc="Extracted Function Image", argstr="--outExtracted %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleExtractMultiObjectDataOutputSpec(TraitedSpec):
    outExtracted = File(desc="Extracted Function Image", exists=True)


class JistModuleExtractMultiObjectData(SEMLikeCommandLine):
    """title: Extract Multi-object Data

category: Developer Tools

description: Extract a single object map from a multi-object representation.

version: 1.0.RC

"""

    input_spec = JistModuleExtractMultiObjectDataInputSpec
    output_spec = JistModuleExtractMultiObjectDataOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleExtractMultiObjectData "
    _outputs_filenames = {'outExtracted':'outExtracted.nii'}


class JistToolsLevelsetToMeshInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inLevelset = File(desc="Levelset Image", exists=True, argstr="--inLevelset %s")
    inTopology = traits.Enum("26/6", "6/26", "18/6", "6/18", "6/6", "wcs", "wco", "no", desc="Topology", argstr="--inTopology %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outSurface = traits.Either(traits.Bool, File(), hash_files=False, desc="Surface", argstr="--outSurface %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistToolsLevelsetToMeshOutputSpec(TraitedSpec):
    outSurface = File(desc="Surface", exists=True)


class JistToolsLevelsetToMesh(SEMLikeCommandLine):
    """title: Level Set To Mesh

category: Developer Tools

description: Extracts a surface mesh from a levelset function.

version: 1.0.RC

"""

    input_spec = JistToolsLevelsetToMeshInputSpec
    output_spec = JistToolsLevelsetToMeshOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.tools.JistToolsLevelsetToMesh "
    _outputs_filenames = {'outSurface':'outSurface'}


class JistModuleAtlasBasedSimulatorInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inMean = File(desc="Mean Image", exists=True, argstr="--inMean %s")
    inStd = File(desc="Std Image", exists=True, argstr="--inStd %s")
    inSegmented = File(desc="Segmented Image", exists=True, argstr="--inSegmented %s")
    inOutput = traits.Float(desc="Output Image Resolution (mm)", argstr="--inOutput %f")
    inNoise = traits.Float(desc="Noise level (ratio)", argstr="--inNoise %f")
    inVariability = traits.Float(desc="Variability level (ratio)", argstr="--inVariability %f")
    inSimulation = traits.Enum("mean_var", "constant_noise", "constant_signal", "both_constant", "neighborhood", desc="Use a different model of signal and noise", argstr="--inSimulation %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outSimulated = traits.Either(traits.Bool, File(), hash_files=False, desc="Simulated Image", argstr="--outSimulated %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleAtlasBasedSimulatorOutputSpec(TraitedSpec):
    outSimulated = File(desc="Simulated Image", exists=True)


class JistModuleAtlasBasedSimulator(SEMLikeCommandLine):
    """title: Atlas-based Simulator

category: Developer Tools

description: Simulates a MR brain image based on atlas priors.

version: 1.0.RC

"""

    input_spec = JistModuleAtlasBasedSimulatorInputSpec
    output_spec = JistModuleAtlasBasedSimulatorOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleAtlasBasedSimulator "
    _outputs_filenames = {'outSimulated':'outSimulated.nii'}


class JistModuleNormalizeIntensityTemplateInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inImage = File(desc="Image to normalize (T1 map)", exists=True, argstr="--inImage %s")
    inTemplate = File(desc="Template (T1 map)", exists=True, argstr="--inTemplate %s")
    inTemplate2 = File(desc="Template (T1-weighted)", exists=True, argstr="--inTemplate2 %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outResult = traits.Either(traits.Bool, File(), hash_files=False, desc="Result Volume", argstr="--outResult %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleNormalizeIntensityTemplateOutputSpec(TraitedSpec):
    outResult = File(desc="Result Volume", exists=True)


class JistModuleNormalizeIntensityTemplate(SEMLikeCommandLine):
    """title: Normalize Intensity to Template

category: Developer Tools

description: Normalizes the intensity of a T1-weighted image via quantitative T1 and a template

version: 1.10.RC

documentation-url: http://www.cbs.mpg.de/

"""

    input_spec = JistModuleNormalizeIntensityTemplateInputSpec
    output_spec = JistModuleNormalizeIntensityTemplateOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleNormalizeIntensityTemplate "
    _outputs_filenames = {'outResult':'outResult.nii'}


class MedicAlgorithmImageCalculatorInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inVolume = File(desc="Volume 1", exists=True, argstr="--inVolume %s")
    inVolume2 = File(desc="Volume 2", exists=True, argstr="--inVolume2 %s")
    inOperation = traits.Enum("Add", "Subtract", "Multiply", "Divide", "Min", "Max", desc="Operation", argstr="--inOperation %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outResult = traits.Either(traits.Bool, File(), hash_files=False, desc="Result Volume", argstr="--outResult %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class MedicAlgorithmImageCalculatorOutputSpec(TraitedSpec):
    outResult = File(desc="Result Volume", exists=True)


class MedicAlgorithmImageCalculator(SEMLikeCommandLine):
    """title: Image Calculator

category: Developer Tools

description: Perform simple image calculator operations on two images. The operations include 'Add', 'Subtract', 'Multiply', and 'Divide'

version: 1.10.RC

documentation-url: http://www.iacl.ece.jhu.edu/

"""

    input_spec = MedicAlgorithmImageCalculatorInputSpec
    output_spec = MedicAlgorithmImageCalculatorOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run edu.jhu.ece.iacl.plugins.utilities.math.MedicAlgorithmImageCalculator "
    _outputs_filenames = {'outResult':'outResult.nii'}


class JistModuleT2FittingInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inEcho = File(desc="Echo 1", exists=True, argstr="--inEcho %s")
    inTE = traits.Float(desc="TE 1", argstr="--inTE %f")
    inEcho2 = File(desc="Echo 2", exists=True, argstr="--inEcho2 %s")
    inTE2 = traits.Float(desc="TE 2", argstr="--inTE2 %f")
    inEcho3 = File(desc="Echo 3", exists=True, argstr="--inEcho3 %s")
    inTE3 = traits.Float(desc="TE 3", argstr="--inTE3 %f")
    inEcho4 = File(desc="Echo 4", exists=True, argstr="--inEcho4 %s")
    inTE4 = traits.Float(desc="TE 4", argstr="--inTE4 %f")
    inEcho5 = File(desc="Echo 5", exists=True, argstr="--inEcho5 %s")
    inTE5 = traits.Float(desc="TE 5", argstr="--inTE5 %f")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outS0 = traits.Either(traits.Bool, File(), hash_files=False, desc="S0 Volume", argstr="--outS0 %s")
    outT2 = traits.Either(traits.Bool, File(), hash_files=False, desc="T2 Volume", argstr="--outT2 %s")
    outR2 = traits.Either(traits.Bool, File(), hash_files=False, desc="R2 Volume", argstr="--outR2 %s")
    outResiduals = traits.Either(traits.Bool, File(), hash_files=False, desc="Residuals Volume", argstr="--outResiduals %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleT2FittingOutputSpec(TraitedSpec):
    outS0 = File(desc="S0 Volume", exists=True)
    outT2 = File(desc="T2 Volume", exists=True)
    outR2 = File(desc="R2 Volume", exists=True)
    outResiduals = File(desc="Residuals Volume", exists=True)


class JistModuleT2Fitting(SEMLikeCommandLine):
    """title: T2* Fitting

category: Developer Tools

description: Fits multiple echos of a T2* sequence with an exponential to get T2* estimates

version: 1.10.RC

documentation-url: http://www.cbs.mpg.de/

"""

    input_spec = JistModuleT2FittingInputSpec
    output_spec = JistModuleT2FittingOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleT2Fitting "
    _outputs_filenames = {'outS0':'outS0.nii','outResiduals':'outResiduals.nii','outR2':'outR2.nii','outT2':'outT2.nii'}


class JistModuleCorticalProfileSamplingInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inCortical = File(desc="Cortical Profile Image", exists=True, argstr="--inCortical %s")
    inIntensity = File(desc="Intensity Image", exists=True, argstr="--inIntensity %s")
    inCortex = File(desc="Cortex Mask (opt)", exists=True, argstr="--inCortex %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outProfile = traits.Either(traits.Bool, File(), hash_files=False, desc="Profile Mappings", argstr="--outProfile %s")
    outProfile2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Profile 4D Mask", argstr="--outProfile2 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleCorticalProfileSamplingOutputSpec(TraitedSpec):
    outProfile = File(desc="Profile Mappings", exists=True)
    outProfile2 = File(desc="Profile 4D Mask", exists=True)


class JistModuleCorticalProfileSampling(SEMLikeCommandLine):
    """title: Profile Sampling

category: Developer Tools

description: Sample some intensity image along a cortical layers surface.

version: 1.0.RC

"""

    input_spec = JistModuleCorticalProfileSamplingInputSpec
    output_spec = JistModuleCorticalProfileSamplingOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleCorticalProfileSampling "
    _outputs_filenames = {'outProfile2':'outProfile2.nii','outProfile':'outProfile.nii'}


class MedicAlgorithmMipavReorientInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inSource = File(desc="Source", exists=True, argstr="--inSource %s")
    inTemplate = File(desc="Template", exists=True, argstr="--inTemplate %s")
    inNew = traits.Enum("Dicom axial", "Dicom coronal", "Dicom sagittal", "User defined", desc="New image orientation", argstr="--inNew %s")
    inUser = traits.Enum("Unknown", "Patient Right to Left", "Patient Left to Right", "Patient Posterior to Anterior", "Patient Anterior to Posterior", "Patient Inferior to Superior", "Patient Superior to Inferior", desc="User defined X-axis orientation (image left to right)", argstr="--inUser %s")
    inUser2 = traits.Enum("Unknown", "Patient Right to Left", "Patient Left to Right", "Patient Posterior to Anterior", "Patient Anterior to Posterior", "Patient Inferior to Superior", "Patient Superior to Inferior", desc="User defined Y-axis orientation (image top to bottom)", argstr="--inUser2 %s")
    inUser3 = traits.Enum("Unknown", "Patient Right to Left", "Patient Left to Right", "Patient Posterior to Anterior", "Patient Anterior to Posterior", "Patient Inferior to Superior", "Patient Superior to Inferior", desc="User defined Z-axis orientation (into the screen)", argstr="--inUser3 %s")
    inUser4 = traits.Enum("Axial", "Coronal", "Sagittal", "Unknown", desc="User defined Image Orientation", argstr="--inUser4 %s")
    inInterpolation = traits.Enum("Nearest Neighbor", "Trilinear", "Bspline 3rd order", "Bspline 4th order", "Cubic Lagrangian", "Quintic Lagrangian", "Heptic Lagrangian", "Windowed Sinc", desc="Interpolation", argstr="--inInterpolation %s")
    inResolution = traits.Enum("Unchanged", "Finest cubic", "Coarsest cubic", "Same as template", desc="Resolution", argstr="--inResolution %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outReoriented = traits.Either(traits.Bool, File(), hash_files=False, desc="Reoriented Volume", argstr="--outReoriented %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class MedicAlgorithmMipavReorientOutputSpec(TraitedSpec):
    outReoriented = File(desc="Reoriented Volume", exists=True)


class MedicAlgorithmMipavReorient(SEMLikeCommandLine):
    """title: Reorient Volume

category: Developer Tools

description: Reorient a volume to a particular anatomical orientation.

version: .alpha

"""

    input_spec = MedicAlgorithmMipavReorientInputSpec
    output_spec = MedicAlgorithmMipavReorientOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run edu.jhu.ece.iacl.plugins.utilities.volume.MedicAlgorithmMipavReorient "
    _outputs_filenames = {'outReoriented':'outReoriented.nii'}


class JistModuleBackgroundEstimatorInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inInput = File(desc="Input Image", exists=True, argstr="--inInput %s")
    inBackground = traits.Enum("exponential", "half-normal", desc="Model distribution for background noise (default is exponential, half-normal is less stringent).", argstr="--inBackground %s")
    inRobust = traits.Float(desc="Robust min, max thresholding", argstr="--inRobust %f")
    inSkip = traits.Enum("true", "false", desc="Skip zero values", argstr="--inSkip %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outForeground = traits.Either(traits.Bool, File(), hash_files=False, desc="Foreground Proba Image", argstr="--outForeground %s")
    outForeground2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Foreground Mask Image", argstr="--outForeground2 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleBackgroundEstimatorOutputSpec(TraitedSpec):
    outForeground = File(desc="Foreground Proba Image", exists=True)
    outForeground2 = File(desc="Foreground Mask Image", exists=True)


class JistModuleBackgroundEstimator(SEMLikeCommandLine):
    """title: Background Estimator

category: Developer Tools

description: Estimate the background data region.

version: 1.0.RC

"""

    input_spec = JistModuleBackgroundEstimatorInputSpec
    output_spec = JistModuleBackgroundEstimatorOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleBackgroundEstimator "
    _outputs_filenames = {'outForeground2':'outForeground2.nii','outForeground':'outForeground.nii'}


class JistModuleFrangiVesselnessInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inInv2 = File(desc="Inv2 Image", exists=True, argstr="--inInv2 %s")
    inSkull = File(desc="Skull Stripping Mask", exists=True, argstr="--inSkull %s")
    inDistance = traits.Float(desc="Distance to background (mm)", argstr="--inDistance %f")
    inoutput = traits.Enum("boundary", "dura_region", "dura_prior", "bg_prior", desc="Outputs an estimate of the dura / CSF boundary or an estimate of the entire dura region.", argstr="--inoutput %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outDura = traits.Either(traits.Bool, File(), hash_files=False, desc="Dura Image", argstr="--outDura %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleFrangiVesselnessOutputSpec(TraitedSpec):
    outDura = File(desc="Dura Image", exists=True)


class JistModuleFrangiVesselness(SEMLikeCommandLine):
    """title: Dura Estimation

category: Developer Tools

description: Filters a MP2RAGE brain image to obtain a probability map of dura matter.

version: 1.0.RC

"""

    input_spec = JistModuleFrangiVesselnessInputSpec
    output_spec = JistModuleFrangiVesselnessOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleFrangiVesselness "
    _outputs_filenames = {'outDura':'outDura.nii'}


class JistModuleCorticalProfileMeshInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inProfile = File(desc="Profile Surface Image", exists=True, argstr="--inProfile %s")
    inselected = traits.Enum("all", "central", "gwb", "cgb", desc="selected profiles", argstr="--inselected %s")
    inDecimation = traits.Int(desc="Decimation", argstr="--inDecimation %d")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outProfiles = traits.Either(traits.Bool, File(), hash_files=False, desc="Profiles (VTK)", argstr="--outProfiles %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleCorticalProfileMeshOutputSpec(TraitedSpec):
    outProfiles = File(desc="Profiles (VTK)", exists=True)


class JistModuleCorticalProfileMesh(SEMLikeCommandLine):
    """title: Profile Mesh

category: Developer Tools

description: Compute a mesh representation of the profiles.

version: 1.0.RC

"""

    input_spec = JistModuleCorticalProfileMeshInputSpec
    output_spec = JistModuleCorticalProfileMeshOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleCorticalProfileMesh "
    _outputs_filenames = {'outProfiles':'outProfiles'}


class JistLaminarProfileGeometryInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inProfile = File(desc="Profile Surface Image", exists=True, argstr="--inProfile %s")
    incomputed = traits.Enum("thickness", "curvedness", "shape_index", "mean_curvature", "gauss_curvature", "profile_curvature", "profile_torsion", desc="computed measure", argstr="--incomputed %s")
    inregularization = traits.Enum("none", "Gaussian", desc="regularization", argstr="--inregularization %s")
    insmoothing = traits.Float(desc="smoothing parameter", argstr="--insmoothing %f")
    inoutside = traits.Float(desc="outside extension (mm)", argstr="--inoutside %f")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outResult = traits.Either(traits.Bool, File(), hash_files=False, desc="Result", argstr="--outResult %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistLaminarProfileGeometryOutputSpec(TraitedSpec):
    outResult = File(desc="Result", exists=True)


class JistLaminarProfileGeometry(SEMLikeCommandLine):
    """title: Profile Geometry

category: Developer Tools

description: Compute various geometric quantities for a cortical layers.

version: 1.0.RC

"""

    input_spec = JistLaminarProfileGeometryInputSpec
    output_spec = JistLaminarProfileGeometryOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.laminar.JistLaminarProfileGeometry "
    _outputs_filenames = {'outResult':'outResult.nii'}


class JistModuleFilterStackingInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inVolume = File(desc="Volume 1", exists=True, argstr="--inVolume %s")
    inVolume2 = File(desc="Volume 2", exists=True, argstr="--inVolume2 %s")
    inVolume3 = File(desc="Volume 3 (opt)", exists=True, argstr="--inVolume3 %s")
    inVolume4 = File(desc="Volume 4 (opt)", exists=True, argstr="--inVolume4 %s")
    inVolume5 = File(desc="Volume 5 (opt)", exists=True, argstr="--inVolume5 %s")
    inBackground = traits.Float(desc="Background threshold [0-1]", argstr="--inBackground %f")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outMaximum = traits.Either(traits.Bool, File(), hash_files=False, desc="Maximum Probability", argstr="--outMaximum %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleFilterStackingOutputSpec(TraitedSpec):
    outMaximum = File(desc="Maximum Probability", exists=True)


class JistModuleFilterStacking(SEMLikeCommandLine):
    """title: Filter Stacking

category: Developer Tools

description: combine probability maps into a single probability image shifted by 2 (! the ordering of the data is important

version: 1.0.RC

documentation-url: http://www.cbs.mpg.de/

"""

    input_spec = JistModuleFilterStackingInputSpec
    output_spec = JistModuleFilterStackingOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleFilterStacking "
    _outputs_filenames = {'outMaximum':'outMaximum.nii'}


class JistModuleTubularVolumeFilterInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inInput = File(desc="Input Image", exists=True, argstr="--inInput %s")
    inPV = traits.Enum("bright", "dark", "both", desc="Outputs the raw intensity values or a probability score for the partial volume regions.", argstr="--inPV %s")
    inoutput = traits.Enum("probability", "intensity", desc="output", argstr="--inoutput %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outTubular = traits.Either(traits.Bool, File(), hash_files=False, desc="Tubular Volume Image", argstr="--outTubular %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleTubularVolumeFilterOutputSpec(TraitedSpec):
    outTubular = File(desc="Tubular Volume Image", exists=True)


class JistModuleTubularVolumeFilter(SEMLikeCommandLine):
    """title: Tubular Volume Filter

category: Developer Tools

description: Filters an image for regions of partial voluming assuming a tubular model of intensity.

version: 2.0.RC

"""

    input_spec = JistModuleTubularVolumeFilterInputSpec
    output_spec = JistModuleTubularVolumeFilterOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleTubularVolumeFilter "
    _outputs_filenames = {'outTubular':'outTubular.nii'}


class JistModuleExtractBrainRegionInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inSegmentation = File(desc="Segmentation Image", exists=True, argstr="--inSegmentation %s")
    inLevelset = File(desc="Levelset Boundary Image", exists=True, argstr="--inLevelset %s")
    inProbability = File(desc="Probability Function Image", exists=True, argstr="--inProbability %s")
    inProbability2 = File(desc="Probability Label Image", exists=True, argstr="--inProbability2 %s")
    inAtlas = File(desc="Atlas file", exists=True, argstr="--inAtlas %s")
    inRegion = traits.Enum("left_cerebrum", "right_cerebrum", "cerebrum", "cerebellum", "cerebellum_brainstem", desc="Region", argstr="--inRegion %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outInside = traits.Either(traits.Bool, File(), hash_files=False, desc="Inside (WM) Mask", argstr="--outInside %s")
    outStructure = traits.Either(traits.Bool, File(), hash_files=False, desc="Structure (GM) Mask", argstr="--outStructure %s")
    outInside2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Inside (WM) Leveset", argstr="--outInside2 %s")
    outStructure2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Structure (GM) Levelset", argstr="--outStructure2 %s")
    outBackground = traits.Either(traits.Bool, File(), hash_files=False, desc="Background (CSF) Levelset", argstr="--outBackground %s")
    outInside3 = traits.Either(traits.Bool, File(), hash_files=False, desc="Inside (WM) Probability", argstr="--outInside3 %s")
    outStructure3 = traits.Either(traits.Bool, File(), hash_files=False, desc="Structure (GM) Probability", argstr="--outStructure3 %s")
    outBackground2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Background (CSF) Probability", argstr="--outBackground2 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleExtractBrainRegionOutputSpec(TraitedSpec):
    outInside = File(desc="Inside (WM) Mask", exists=True)
    outStructure = File(desc="Structure (GM) Mask", exists=True)
    outInside2 = File(desc="Inside (WM) Leveset", exists=True)
    outStructure2 = File(desc="Structure (GM) Levelset", exists=True)
    outBackground = File(desc="Background (CSF) Levelset", exists=True)
    outInside3 = File(desc="Inside (WM) Probability", exists=True)
    outStructure3 = File(desc="Structure (GM) Probability", exists=True)
    outBackground2 = File(desc="Background (CSF) Probability", exists=True)


class JistModuleExtractBrainRegion(SEMLikeCommandLine):
    """title: Extract Brain Region

category: Developer Tools

description: Extract a selected region of interest from a multi-object representation, based on atlas definitions.

version: 1.0.RC

"""

    input_spec = JistModuleExtractBrainRegionInputSpec
    output_spec = JistModuleExtractBrainRegionOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleExtractBrainRegion "
    _outputs_filenames = {'outStructure2':'outStructure2.nii','outStructure3':'outStructure3.nii','outInside2':'outInside2.nii','outInside3':'outInside3.nii','outBackground':'outBackground.nii','outInside':'outInside.nii','outBackground2':'outBackground2.nii','outStructure':'outStructure.nii'}


class JistModuleProbabilityToLevelsetInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inProbability = File(desc="Probability Image", exists=True, argstr="--inProbability %s")
    inScale = traits.Float(desc="Scale (mm)", argstr="--inScale %f")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outLevelset = traits.Either(traits.Bool, File(), hash_files=False, desc="Levelset Image", argstr="--outLevelset %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleProbabilityToLevelsetOutputSpec(TraitedSpec):
    outLevelset = File(desc="Levelset Image", exists=True)


class JistModuleProbabilityToLevelset(SEMLikeCommandLine):
    """title: Probability To Levelset

category: Developer Tools

description: Convert a probability map thresholded at 0.5 into a levelset.

version: 1.0.RC

"""

    input_spec = JistModuleProbabilityToLevelsetInputSpec
    output_spec = JistModuleProbabilityToLevelsetOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleProbabilityToLevelset "
    _outputs_filenames = {'outLevelset':'outLevelset.nii'}


class JistModuleEmbeddedSyNInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inSource = File(desc="Source Image", exists=True, argstr="--inSource %s")
    inTarget = File(desc="Target Image", exists=True, argstr="--inTarget %s")
    inexternal = File(desc="external SyN script", exists=True, argstr="--inexternal %s")
    incoarse = traits.Int(desc="coarse level iterations", argstr="--incoarse %d")
    inmedium = traits.Int(desc="medium level iterations", argstr="--inmedium %d")
    infine = traits.Int(desc="fine level iterations", argstr="--infine %d")
    inrun = traits.Enum("true", "false", desc="run affine first", argstr="--inrun %s")
    incost = traits.Enum("Cross Correlation", "Mutual Information", desc="cost function", argstr="--incost %s")
    ininterpolation = traits.Enum("Linear", "Nearest Neighbor", "BSpline", desc="interpolation method", argstr="--ininterpolation %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outDeformed = traits.Either(traits.Bool, File(), hash_files=False, desc="Deformed source", argstr="--outDeformed %s")
    outMapping = traits.Either(traits.Bool, File(), hash_files=False, desc="Mapping function", argstr="--outMapping %s")
    outInverse = traits.Either(traits.Bool, File(), hash_files=False, desc="Inverse Mapping function", argstr="--outInverse %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleEmbeddedSyNOutputSpec(TraitedSpec):
    outDeformed = File(desc="Deformed source", exists=True)
    outMapping = File(desc="Mapping function", exists=True)
    outInverse = File(desc="Inverse Mapping function", exists=True)


class JistModuleEmbeddedSyN(SEMLikeCommandLine):
    """title: Embedded SyN

category: Developer Tools

description: Provides a simple wrapper around the SyN algorithm.

version: 1.0.RC

"""

    input_spec = JistModuleEmbeddedSyNInputSpec
    output_spec = JistModuleEmbeddedSyNOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleEmbeddedSyN "
    _outputs_filenames = {'outInverse':'outInverse.nii','outMapping':'outMapping.nii','outDeformed':'outDeformed.nii'}


class JistLaminarProfileCalculatorInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inIntensity = File(desc="Intensity Profile Image", exists=True, argstr="--inIntensity %s")
    inMask = File(desc="Mask Image (opt, 3D or 4D)", exists=True, argstr="--inMask %s")
    incomputed = traits.Enum("mean", "stdev", "skewness", "kurtosis", desc="computed statistic", argstr="--incomputed %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outResult = traits.Either(traits.Bool, File(), hash_files=False, desc="Result", argstr="--outResult %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistLaminarProfileCalculatorOutputSpec(TraitedSpec):
    outResult = File(desc="Result", exists=True)


class JistLaminarProfileCalculator(SEMLikeCommandLine):
    """title: Profile Calculator

category: Developer Tools

description: Compute various moments for intensities mapped along a cortical profile.

version: 1.0.RC

"""

    input_spec = JistLaminarProfileCalculatorInputSpec
    output_spec = JistLaminarProfileCalculatorOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.laminar.JistLaminarProfileCalculator "
    _outputs_filenames = {'outResult':'outResult.nii'}


class JistModuleNormalizeToRegisteredTemplateInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inImage = File(desc="Image to normalize", exists=True, argstr="--inImage %s")
    inRegistered = File(desc="Registered Template", exists=True, argstr="--inRegistered %s")
    inRegistered2 = File(desc="Registered Mask", exists=True, argstr="--inRegistered2 %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outResult = traits.Either(traits.Bool, File(), hash_files=False, desc="Result Volume", argstr="--outResult %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleNormalizeToRegisteredTemplateOutputSpec(TraitedSpec):
    outResult = File(desc="Result Volume", exists=True)


class JistModuleNormalizeToRegisteredTemplate(SEMLikeCommandLine):
    """title: Normalize to regsitered Template

category: Developer Tools

description: Normalizes the intensity of a T1-weighted image via quantitative T1 and a template

version: 1.10.RC

documentation-url: http://www.cbs.mpg.de/

"""

    input_spec = JistModuleNormalizeToRegisteredTemplateInputSpec
    output_spec = JistModuleNormalizeToRegisteredTemplateOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleNormalizeToRegisteredTemplate "
    _outputs_filenames = {'outResult':'outResult.nii'}


class JistModuleSmoothCorticalData2InputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inGWB = File(desc="GWB Levelset Image", exists=True, argstr="--inGWB %s")
    inCGB = File(desc="CGB Levelset Image", exists=True, argstr="--inCGB %s")
    inData = File(desc="Data Image", exists=True, argstr="--inData %s")
    inMask = File(desc="Mask Image", exists=True, argstr="--inMask %s")
    inGaussian = traits.Float(desc="Gaussian FWHM (mm)", argstr="--inGaussian %f")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outSmoothed = traits.Either(traits.Bool, File(), hash_files=False, desc="Smoothed Data Image", argstr="--outSmoothed %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleSmoothCorticalData2OutputSpec(TraitedSpec):
    outSmoothed = File(desc="Smoothed Data Image", exists=True)


class JistModuleSmoothCorticalData2(SEMLikeCommandLine):
    """title: Smooth Cortical Data 2

category: Developer Tools

description: Smooths data using a Gaussian weighting as a function of the minimum marching distance in the cortex.

version: 1.0.RC

"""

    input_spec = JistModuleSmoothCorticalData2InputSpec
    output_spec = JistModuleSmoothCorticalData2OutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleSmoothCorticalData2 "
    _outputs_filenames = {'outSmoothed':'outSmoothed.nii'}


class JistCortexSurfaceMeshInflationInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inLevelset = File(desc="Levelset Image", exists=True, argstr="--inLevelset %s")
    inSOR = traits.Float(desc="SOR Parameter", argstr="--inSOR %f")
    inMean = traits.Float(desc="Mean Curvature Threshold", argstr="--inMean %f")
    inStep = traits.Int(desc="Step Size", argstr="--inStep %d")
    inMax = traits.Int(desc="Max Iterations", argstr="--inMax %d")
    inLorentzian = traits.Enum("true", "false", desc="Lorentzian Norm", argstr="--inLorentzian %s")
    inTopology = traits.Enum("26/6", "6/26", "18/6", "6/18", "6/6", "wcs", "wco", "no", desc="Topology", argstr="--inTopology %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outOriginal = traits.Either(traits.Bool, File(), hash_files=False, desc="Original Surface", argstr="--outOriginal %s")
    outInflated = traits.Either(traits.Bool, File(), hash_files=False, desc="Inflated Surface", argstr="--outInflated %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistCortexSurfaceMeshInflationOutputSpec(TraitedSpec):
    outOriginal = File(desc="Original Surface", exists=True)
    outInflated = File(desc="Inflated Surface", exists=True)


class JistCortexSurfaceMeshInflation(SEMLikeCommandLine):
    """title: Surface Mesh Inflation

category: Developer Tools

description: Inflates a cortical surface mesh.

version: 1.0.RC

"""

    input_spec = JistCortexSurfaceMeshInflationInputSpec
    output_spec = JistCortexSurfaceMeshInflationOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.cortex.JistCortexSurfaceMeshInflation "
    _outputs_filenames = {'outOriginal':'outOriginal','outInflated':'outInflated'}


class JistToolsCopyHeaderInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inImage = File(desc="Image", exists=True, argstr="--inImage %s")
    inReference = File(desc="Reference", exists=True, argstr="--inReference %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outChanged = traits.Either(traits.Bool, File(), hash_files=False, desc="Changed Image", argstr="--outChanged %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistToolsCopyHeaderOutputSpec(TraitedSpec):
    outChanged = File(desc="Changed Image", exists=True)


class JistToolsCopyHeader(SEMLikeCommandLine):
    """title: Copy Header

category: Developer Tools

description: Copy the header from one image into another one. No change is made on the data.

version: 1.0.RC

"""

    input_spec = JistToolsCopyHeaderInputSpec
    output_spec = JistToolsCopyHeaderOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.tools.JistToolsCopyHeader "
    _outputs_filenames = {'outChanged':'outChanged.nii'}


class RandomVolInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inSize = traits.Int(desc="Size of Volume in X direction", argstr="--inSize %d")
    inSize2 = traits.Int(desc="Size of Volume in Y direction", argstr="--inSize2 %d")
    inSize3 = traits.Int(desc="Size of Volume in Z direction", argstr="--inSize3 %d")
    inSize4 = traits.Int(desc="Size of Volume in t direction", argstr="--inSize4 %d")
    inStandard = traits.Int(desc="Standard Deviation for Normal Distribution", argstr="--inStandard %d")
    inLambda = traits.Float(desc="Lambda Value for Exponential Distribution", argstr="--inLambda %f")
    inMaximum = traits.Int(desc="Maximum Value", argstr="--inMaximum %d")
    inMinimum = traits.Int(desc="Minimum Value", argstr="--inMinimum %d")
    inField = traits.Enum("Uniform", "Normal", "Exponential", desc="Field", argstr="--inField %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outRand1 = traits.Either(traits.Bool, File(), hash_files=False, desc="Rand1", argstr="--outRand1 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class RandomVolOutputSpec(TraitedSpec):
    outRand1 = File(desc="Rand1", exists=True)


class RandomVol(SEMLikeCommandLine):
    """title: Random_Volume_Generator

category: Developer Tools

description: Generate a random scalar volume.

version: 1.11.RC

documentation-url: http://www.nitrc.org/projects/jist/

"""

    input_spec = RandomVolInputSpec
    output_spec = RandomVolOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run edu.jhu.bme.smile.demo.RandomVol "
    _outputs_filenames = {'outRand1':'outRand1.nii'}


class JistModuleRenameImageInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inImage = File(desc="Image", exists=True, argstr="--inImage %s")
    inReference = File(desc="Reference name", exists=True, argstr="--inReference %s")
    inadd = traits.Str(desc="add as suffix", argstr="--inadd %s")
    inremove = traits.Str(desc="remove string", argstr="--inremove %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outChanged = traits.Either(traits.Bool, File(), hash_files=False, desc="Changed Image", argstr="--outChanged %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleRenameImageOutputSpec(TraitedSpec):
    outChanged = File(desc="Changed Image", exists=True)


class JistModuleRenameImage(SEMLikeCommandLine):
    """title: Rename Image

category: Developer Tools

description: Rename an image. No change is made on the data.

version: 1.0.RC

"""

    input_spec = JistModuleRenameImageInputSpec
    output_spec = JistModuleRenameImageOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleRenameImage "
    _outputs_filenames = {'outChanged':'outChanged.nii'}


class JistModuleCorticalProfileCalculatorInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inIntensity = File(desc="Intensity Profile Image", exists=True, argstr="--inIntensity %s")
    inMask = File(desc="Mask Image (opt, 3D or 4D)", exists=True, argstr="--inMask %s")
    inCentering = traits.Float(desc="center parameter for filtering (profiles normalized in [-1;+1])", argstr="--inCentering %f")
    inScaling = traits.Float(desc="scale parameter for filtering (profiles normalized in [-1;+1])", argstr="--inScaling %f")
    incomputed = traits.Enum("mean", "stdev", "skewness", "kurtosis", "Gaussian", "1st_Gauss_deriv", "2nd_Gauss_deriv", desc="computed statistic", argstr="--incomputed %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outResult = traits.Either(traits.Bool, File(), hash_files=False, desc="Result", argstr="--outResult %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleCorticalProfileCalculatorOutputSpec(TraitedSpec):
    outResult = File(desc="Result", exists=True)


class JistModuleCorticalProfileCalculator(SEMLikeCommandLine):
    """title: Profile Calculator

category: Developer Tools

description: Compute various features for an intensity map along a cortical profile.

version: 1.0.RC

"""

    input_spec = JistModuleCorticalProfileCalculatorInputSpec
    output_spec = JistModuleCorticalProfileCalculatorOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleCorticalProfileCalculator "
    _outputs_filenames = {'outResult':'outResult.nii'}


class JistModuleAssignMGDMSliceLabelsInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inLabel = File(desc="Label Image", exists=True, argstr="--inLabel %s")
    inSlice = traits.Enum("X", "Y", "Z", desc="Slice direction", argstr="--inSlice %s")
    inMGDM = File(desc="MGDM Label Image", exists=True, argstr="--inMGDM %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outSegmentation = traits.Either(traits.Bool, File(), hash_files=False, desc="Segmentation", argstr="--outSegmentation %s")
    outProbability = traits.Either(traits.Bool, File(), hash_files=False, desc="Probability", argstr="--outProbability %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleAssignMGDMSliceLabelsOutputSpec(TraitedSpec):
    outSegmentation = File(desc="Segmentation", exists=True)
    outProbability = File(desc="Probability", exists=True)


class JistModuleAssignMGDMSliceLabels(SEMLikeCommandLine):
    """title: Assign MGDM Slice Labels

category: Developer Tools

description: Assign labels to a given segmentation.

version: 1.0.RC

"""

    input_spec = JistModuleAssignMGDMSliceLabelsInputSpec
    output_spec = JistModuleAssignMGDMSliceLabelsOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleAssignMGDMSliceLabels "
    _outputs_filenames = {'outSegmentation':'outSegmentation.nii','outProbability':'outProbability.nii'}


class JistModuleCorticalProfileMeshSamplingInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inIntensity = File(desc="Intensity Image", exists=True, argstr="--inIntensity %s")
    inImage = traits.Str(desc="Image Label", argstr="--inImage %s")
    inProfile = File(desc="Profile Surface Image", exists=True, argstr="--inProfile %s")
    inOriginal = File(desc="Original Surface", exists=True, argstr="--inOriginal %s")
    inInflated = File(desc="Inflated Surface", exists=True, argstr="--inInflated %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outMapped = traits.Either(traits.Bool, File(), hash_files=False, desc="Mapped Original Surfaces", argstr="--outMapped %s")
    outMapped2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Mapped Inflated Surfaces", argstr="--outMapped2 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleCorticalProfileMeshSamplingOutputSpec(TraitedSpec):
    outMapped = File(desc="Mapped Original Surfaces", exists=True)
    outMapped2 = File(desc="Mapped Inflated Surfaces", exists=True)


class JistModuleCorticalProfileMeshSampling(SEMLikeCommandLine):
    """title: Cortical Profile Mesh Sampling

category: Developer Tools

description: Project profile values on a given cortical surface mesh

version: 1.0.RC

"""

    input_spec = JistModuleCorticalProfileMeshSamplingInputSpec
    output_spec = JistModuleCorticalProfileMeshSamplingOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleCorticalProfileMeshSampling "
    _outputs_filenames = {'outMapped':'outMapped','outMapped2':'outMapped2'}


class JistToolsIntensityBoundsInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inImage = File(desc="Image Volume", exists=True, argstr="--inImage %s")
    inBounds = traits.Enum("raw_intensity", "normalized", "robust", desc="Bounds definition", argstr="--inBounds %s")
    inMin = traits.Float(desc="Min", argstr="--inMin %f")
    inMax = traits.Float(desc="Max", argstr="--inMax %f")
    inNormalize = traits.Enum("true", "false", desc="Normalize output", argstr="--inNormalize %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outResult = traits.Either(traits.Bool, File(), hash_files=False, desc="Result Volume", argstr="--outResult %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistToolsIntensityBoundsOutputSpec(TraitedSpec):
    outResult = File(desc="Result Volume", exists=True)


class JistToolsIntensityBounds(SEMLikeCommandLine):
    """title: Intensity Bounds

category: Developer Tools

description: Perform simple intensity thresholding into a [min, max] interval.

version: 1.10.RC

documentation-url: http://www.cbs.mpg.de/

"""

    input_spec = JistToolsIntensityBoundsInputSpec
    output_spec = JistToolsIntensityBoundsOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.tools.JistToolsIntensityBounds "
    _outputs_filenames = {'outResult':'outResult.nii'}


class JistModuleCorticalMeshMappingInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inIntensity = File(desc="Intensity Image", exists=True, argstr="--inIntensity %s")
    inOriginal = File(desc="Original Surface", exists=True, argstr="--inOriginal %s")
    inInflated = File(desc="Inflated Surface", exists=True, argstr="--inInflated %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outMapped = traits.Either(traits.Bool, File(), hash_files=False, desc="Mapped Original Surface", argstr="--outMapped %s")
    outMapped2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Mapped Inflated Surface", argstr="--outMapped2 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleCorticalMeshMappingOutputSpec(TraitedSpec):
    outMapped = File(desc="Mapped Original Surface", exists=True)
    outMapped2 = File(desc="Mapped Inflated Surface", exists=True)


class JistModuleCorticalMeshMapping(SEMLikeCommandLine):
    """title: Surface Mesh Mapping

category: Developer Tools

description: Map some intensity image on a pair of original+inflated cortical surfaces.

version: 1.0.RC

"""

    input_spec = JistModuleCorticalMeshMappingInputSpec
    output_spec = JistModuleCorticalMeshMappingOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleCorticalMeshMapping "
    _outputs_filenames = {'outMapped':'outMapped','outMapped2':'outMapped2'}


class JistModuleT2sSlabCombinationInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inVolume = File(desc="Volume 1", exists=True, argstr="--inVolume %s")
    inWeight = File(desc="Weight 1", exists=True, argstr="--inWeight %s")
    inVolume2 = File(desc="Volume 2", exists=True, argstr="--inVolume2 %s")
    inWeight2 = File(desc="Weight 2", exists=True, argstr="--inWeight2 %s")
    inVolume3 = File(desc="Volume 3", exists=True, argstr="--inVolume3 %s")
    inWeight3 = File(desc="Weight 3", exists=True, argstr="--inWeight3 %s")
    inReference = File(desc="Reference", exists=True, argstr="--inReference %s")
    inOverlap = traits.Int(desc="Overlap propagation distance", argstr="--inOverlap %d")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outMerged = traits.Either(traits.Bool, File(), hash_files=False, desc="Merged Image", argstr="--outMerged %s")
    outMerged2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Merged Proba", argstr="--outMerged2 %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleT2sSlabCombinationOutputSpec(TraitedSpec):
    outMerged = File(desc="Merged Image", exists=True)
    outMerged2 = File(desc="Merged Proba", exists=True)


class JistModuleT2sSlabCombination(SEMLikeCommandLine):
    """title: T2* Slab Combination

category: Developer Tools

description: Rescale and merge data from overlapping T2* slabs

version: 1.0.RC

documentation-url: http://www.cbs.mpg.de/

"""

    input_spec = JistModuleT2sSlabCombinationInputSpec
    output_spec = JistModuleT2sSlabCombinationOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleT2sSlabCombination "
    _outputs_filenames = {'outMerged2':'outMerged2.nii','outMerged':'outMerged.nii'}


class JistModuleFastClusteringNDInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inIntensity = File(desc="Intensity Image (4D)", exists=True, argstr="--inIntensity %s")
    inMask = File(desc="Mask Image", exists=True, argstr="--inMask %s")
    inDistribution = traits.Enum("hotelling", "jensen-shannon", "gauss-avg-distance", "gauss-avg-correlation", "gauss-mmx-distance", "gauss-mmx-correlation", "np-avg-distance", "np-avg-correlation", "np-mmx-distance", "np-mmx-correlation", "graph-based-distance", "graph-based-correlation", desc="Distribution metric", argstr="--inDistribution %s")
    inCovariance = traits.Enum("single", "diagonal", "full", "pca", desc="Covariance", argstr="--inCovariance %s")
    inThreshold = traits.Float(desc="varies with algorithm: default is 0.5 for Jensen-Shannon, 0.05 for Hotelling, 0.0 for the rest", argstr="--inThreshold %f")
    inBasis = traits.Float(desc="number of voxels used in regularization (graph-based) and covariance approximation (Jensen-Shannon, Hotelling)", argstr="--inBasis %f")
    inMin = traits.Float(desc="minimum ratio of volume to keep the clusters", argstr="--inMin %f")
    inMax = traits.Float(desc="maximum ratio of volume to keep the clusters", argstr="--inMax %f")
    inConnectivity = traits.Int(desc="Connectivity", argstr="--inConnectivity %d")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outClusters = traits.Either(traits.Bool, File(), hash_files=False, desc="Clusters", argstr="--outClusters %s")
    outClusters2 = traits.Either(traits.Bool, File(), hash_files=False, desc="Clusters2", argstr="--outClusters2 %s")
    outMean = traits.Either(traits.Bool, File(), hash_files=False, desc="Mean", argstr="--outMean %s")
    outStdev = traits.Either(traits.Bool, File(), hash_files=False, desc="Stdev", argstr="--outStdev %s")
    outEdges = traits.Either(traits.Bool, File(), hash_files=False, desc="Edges", argstr="--outEdges %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleFastClusteringNDOutputSpec(TraitedSpec):
    outClusters = File(desc="Clusters", exists=True)
    outClusters2 = File(desc="Clusters2", exists=True)
    outMean = File(desc="Mean", exists=True)
    outStdev = File(desc="Stdev", exists=True)
    outEdges = File(desc="Edges", exists=True)


class JistModuleFastClusteringND(SEMLikeCommandLine):
    """title: Fast Clustering ND

category: Developer Tools

description: Clusters 4D data aggregatively with a Gaussian model.

version: 1.0.RC

"""

    input_spec = JistModuleFastClusteringNDInputSpec
    output_spec = JistModuleFastClusteringNDOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleFastClusteringND "
    _outputs_filenames = {'outMean':'outMean.nii','outClusters2':'outClusters2.nii','outEdges':'outEdges.nii','outStdev':'outStdev.nii','outClusters':'outClusters.nii'}


class JistBrainPartialVolumeFilterInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inInput = File(desc="Input Image", exists=True, argstr="--inInput %s")
    inPV = traits.Enum("bright", "dark", "both", desc="Outputs the raw intensity values or a probability score for the partial volume regions.", argstr="--inPV %s")
    inoutput = traits.Enum("probability", "intensity", desc="output", argstr="--inoutput %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outPartial = traits.Either(traits.Bool, File(), hash_files=False, desc="Partial Volume Image", argstr="--outPartial %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistBrainPartialVolumeFilterOutputSpec(TraitedSpec):
    outPartial = File(desc="Partial Volume Image", exists=True)


class JistBrainPartialVolumeFilter(SEMLikeCommandLine):
    """title: Partial Volume Filter

category: Developer Tools

description: Filters an image for regions of partial voluming assuming a ridge-like model of intensity.

version: 2.0.RC

"""

    input_spec = JistBrainPartialVolumeFilterInputSpec
    output_spec = JistBrainPartialVolumeFilterOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.brain.JistBrainPartialVolumeFilter "
    _outputs_filenames = {'outPartial':'outPartial.nii'}


class JistModuleCorticalProfileFeatureSetCalculatorInputSpec(CommandLineInputSpec):
    maxMemoryUsage = traits.Int(desc="Maximum Memory Allowed (in MegaBytes). Increase or decrease this depending on java virtual machine heap size requirements.", argstr="--maxMemoryUsage %d")
    inIntensity = File(desc="Intensity Profile Image", exists=True, argstr="--inIntensity %s")
    inMask = File(desc="Mask Image (opt, 3D or 4D)", exists=True, argstr="--inMask %s")
    incomputed = traits.Enum("Curve_model1 (avg, slope, quadrature)", "Curve_model2 (same on derivative)", "Curve_model3 (1+2)", "Juelich1 (amplitude, mean, stdev, skewness, kurtosis)", "Juelich2 (same on the abs. derivative)", "Juelich3 (1+2)", "Juelich4 (same as 1 on intensity-weighted location)", "Juelich5 (same as 2 on derivative-weighted location)", "Juelich6 (everything)", desc="computed statistic", argstr="--incomputed %s")
    xPrefExt = traits.Enum("nrrd", desc="Output File Type", argstr="--xPrefExt %s")
    outResult = traits.Either(traits.Bool, File(), hash_files=False, desc="Result", argstr="--outResult %s")
    outExecution = traits.Str(desc="Execution Time", argstr="--outExecution %s")


class JistModuleCorticalProfileFeatureSetCalculatorOutputSpec(TraitedSpec):
    outResult = File(desc="Result", exists=True)


class JistModuleCorticalProfileFeatureSetCalculator(SEMLikeCommandLine):
    """title: Profile Feature Set Calculator

category: Developer Tools

description: Compute various features for an intensity map along a cortical profile.

version: 1.0.RC

"""

    input_spec = JistModuleCorticalProfileFeatureSetCalculatorInputSpec
    output_spec = JistModuleCorticalProfileFeatureSetCalculatorOutputSpec
    _cmd = "java edu.jhu.ece.iacl.jist.cli.run de.mpg.cbs.jist.modules.JistModuleCorticalProfileFeatureSetCalculator "
    _outputs_filenames = {'outResult':'outResult.nii'}
